;Apricot PC/Xi mono driver
;**************************************************************************
;*			    DEVICE SPECIFIC ROUTINES			  *
;*									  *   
;*		These routines and equates are device dependent.	  *
;*									  *
;*									  *
;*									  *
;**************************************************************************
;Hist
;Name	Date	Modification
;
include externs.a86
include axiregs.a86
dseg
        extrn   ptsin_ptr:dword,intin_ptr:dword
	public	msb_mask_table
cseg
	extrn	fliptbl:byte
;
	public	INIT_G,DINIT_G
	public	CONCAT
	if not GSX
	 public	TRAN_FM
	 public	EX_TIMV
	endif
	public	S_COLMAP
	public	I_COLMAP
	public	CONTRL,INTIN,INTOUT,PTSIN,PTSOUT
	public	PLYGN_BEZ,PLYGN_RROT,MAP_COL
;;
	extrn	entry:near		;the place to jump to if this module
;integer array indexing equates
	W_1	equ	word ptr 0
	W_2	equ	word ptr 2
	W_3	equ	word ptr 4
	W_4	equ	word ptr 6
	W_5	equ	word ptr 8
	W_6	equ	word ptr 10
	W_7	equ	word ptr 12
	W_8	equ	word ptr 14
	W_9	equ	word ptr 16
	W_10	equ	word ptr 18
;
ibmvdi	equ 0			;leave out the old code if for retail
pc1512	equ 	false		;PC1512 various special cases
;
EJECT
;
	jmp	entry		;if we come in from here, go to real entry
;****************************************	
;escape func 2
; Enter Graphics Mode 
;****************************************	
INIT_G:
	pushf
	mov	ax,cs
	mov	usermot+2,ax		;init the user call vectors segs
	mov	userbut+2,ax
	mov	usercur+2,ax
	mov	ax,offset umotvec
	mov	usermot,ax
	mov	ax,offset ubutvec
	mov	userbut,ax
	mov	ax,offset mov_cur
	mov	usercur,ax
	popf

escfn2: 
	mov	dispmode,0		; 
	mov	si,offset setgfx
	call	putstr

	push	es
	mov	ax, 0F000h		; Video pointer segment
	mov	es, ax
	xor	di, di			; ES:DI -> first video pointer
	mov	ax, graph_plane
	shr	ax, 1			; AX = graph plane start
	mov	cx, 1250
init_vram:
	stosw				; We now have the pointers pointing
	inc	ax			; at successive character cells
	loop	init_vram
	pop	es	

	call	clearmem		; clear graphics display
if mouse
	mov	bl,1
	call	mouse_function		;initialize the mouse
	mov	bl,2
	call	mouse_function
	mov	bl,1
	call	mouse_function
endif
;
; Put the keyboard in raw mode.
;
	mov	bx, 32h	
	mov	cx, 4
	mov	dx, 1
	int	0FCh
;
; Hook the timer hardware interrupt.
;
	mov	al, cs:tmr_hooked
	test	al, al
	jnz	tmr1

	push	ds
	push	es
	mov	ax,3556h		;Get INT 56h
	int	21h
	mov	ax, es
	mov	di, offset tmr_dos+1
	mov	cs:[di], bx		;Offset
	mov	cs:2[di], ax		;Segment
	mov	ax, cs
	mov	ds, ax
	mov	dx, offset tmr_isr
	mov	ax,2556h		;Point INT 56h at our local handler.
	int	21h	
	pop	es
	pop	ds
	mov	cs:tmr_hooked, 1
tmr1:
	call	k_m_show_stat
	ret
;
tmr_hooked db	0
;
; This is the replacement timer ISR. It firstly calls our new GEM handler;
; then, the original DOS handler. That way round the DOS bit, which 
; acknowledges the interrupt, comes last.
;
tmr_isr:
	cli

;
; If a sound's playing, decrease the countdown until it stops.
;
	pushf
	push	ax
	mov	ax, sound_playing
	or	ax, ax
	jz	tmr_isr1
	dec	sound_playing
tmr_isr1:
	pop	ax

	popf
	pushf
tmr_gem:
	callf	tmr_iret
	pushf
tmr_dos:
	callf	tmr_iret

	iret
;
tmr_iret:
	iret
;


;
;****************************************	
;escape func 3
; Exit Graphics Mode
;****************************************	
DINIT_G:
escfn3: 				; 
if mouse
	mov	bl,2			;de init the mouse
	call	mouse_function
endif
;
; Take the keyboard out of raw mode
;
	mov	bx, 32h
	mov	cx, 4
	mov	dx, 0
	int	0FCh
;
; Unhook the timer interrupt
;
	mov	al, cs:tmr_hooked	;Have we hooked the timer interrupt?
	and	al, al
	jz	no_unhook
	push	ds			;Restore the original DOS handler 
	mov	di, offset tmr_dos+1	;for the timer interrupt.
	mov	dx, cs:[di]
	mov	ax, cs:2[di]
	mov	ds, ax
	mov	ax, 2556h
	int	21h
	pop	ds
	mov	cs:tmr_hooked, 0
no_unhook:
	mov	dispmode,1		; 
	mov	si,offset settxt
	call	putstr
	call	escfn8			;home
	call	escfn9			;clear to end of screen
	ret
;
putstr:	lodsb
	or	al, al
	jnz	putstr1
	ret
putstr1:
;; MS-DOS with BIOS 2.4 doesn't implement this. Use INT29 instead.
;;	int	0F1h

	int	29h
	jmps	putstr

EJECT
;****************************************************************
;CONCAT 							*	
;	ENTRY	Reg. BX - X-coordinate (dev. coord.)		*
;		Reg. AX - Y-coordinate (dev. coord.)		*
;								*
;	EXIT	Reg. DI - Physical address			*
;		Reg. BL - Byte index				*	
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
concat:
;
; The address of the row is (AX / 16) * 50 * 32
;
	mov	cx, ax			;CX = Y-coord.
	and	ax, 01F0h		;CX = Y-coord of top of cell
	mov	dx, 100
	mul	dx			;AX = offset of first cell in row.
	mov	di, ax
;
; Now find the correct cell in the row. Offset to this is (BX / 16) * 32
;	 
	mov	ax, bx			;AX = X-coord.
	and	ax, 03F0h		;(BX / 16) * 16
	add	ax, ax			;(BX / 16) * 32	
	add	di, ax
;
; Now the correct Y offset within the cell. This is (Y % 16) * 2
;
	mov	ax, cx
	and	ax, 0Fh
	add	ax, ax
	add	di, ax
;
; Now the correct X offset within the cell. This is (X / 8) & 1
;
	mov	ax, bx
	test	ax, 8
	jz	cell_lh
	inc	di
cell_lh:
;
; And finally the offset within the byte
;
	mov	dl, bl			;save low order byte of x-coord
	and	dl, 07h 		;mask off data bit index.
	xor	dh, dh
	mov	bx, dx			;bx = bit index into data byte
	ret

EJECT
	if not GSX
;****************************************************************
;TRAN_FM							*	
;	ENTRY	                                        	*
;		                                     		*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
TRAN_FM:
	push	bp	
	push	es
	push	ds
	les	di,contrl_ptr
	mov	ax, es: word ptr 14[di]
	mov	bx, es: word ptr 16[di]		; get smfdb pointer
	mov	dx, es: word ptr 18[di]
	mov	bp, es: word ptr 20[di]		; get dmfdb pointer
	mov	es, bx
	mov	di, ax				; set es:di to it
	mov	ax, es: word ptr 12[di]		; get num of planes in source
; xform n to n planes
	push	ax				; save the plane count
	call	calc_src_form
	call	calc_des_form
	call	calc_seg_off
	pop	bx				; get the plane count back
col_to_col_lp:
	push	si
	push	di
	push	bx
	push	cx
	mov	bx, offset fliptbl

col_to_col_loop:
	lodsw
if byte_swap
	xchg	ah,al
endif
;
; Mirror both bytes
;
	xlat	cs:byte ptr [bx]
	xchg	ah, al
	xlat	cs:byte ptr [bx]
if rev_vid
	not	ax
endif

	stosw
	loop	col_to_col_loop
	pop	cx
	pop	bx
	pop	di
	pop	si
	call	tran_next_seg
	dec	bx
	jnz	col_to_col_lp
	pop	ds
	pop	es
	pop	bp
	ret
tran_next_seg:
	push	cx
	mov	ax, cx
	mov	cl, 3
	shr	ax, cl			;get the segment increment
	mov	bp, es
	add	bp, ax
	mov	es, bp
	mov	bp, ds
	add	bp, ax
	mov	ds, bp
	pop	cx
	mov	ax, cx			;get the byte increment
	and	ax, 0007h
	shl	ax, 1
	add	si, ax
	add	di, ax
	ret
;
calc_seg_off:
	mov	bp, cx				; find the next seg
	shr	bp,1
	shr	bp,1
	shr	bp,1
	mov	dx, cx
	shl	dx, 1
	and	dx, 000fh			; find the incremental offset
;	mov	bx,num_planes
	ret
;
calc_des_form:
	mov	ds, bp
	mov	si, dx				; load dmfdb pointer
	not	bx
	and	bx,1				; invert format
	mov	10[si],bx			; toggle dest form
	mov	ax, es: word ptr 2[di]		; get source ptr seg
	mov	di, es: word ptr [di]		; offset
	mov	es, ax
	mov	ax, 2[si]
	mov	si, [si]			; get dest ptr seg,offset
	mov	ds, ax
	xchg	si,di				; swap pointers
	mov	ax, es
	mov	dx, ds
	mov	es, dx
	mov	ds, ax
	ret
;
calc_src_form:
	mov	bx, es: word ptr 10[di]		; get the format flag
	mov	ax, es: word ptr 8[di]		; get the width in words
	mov	cx, es: word ptr 6[di]		; get the height in pixels
	push	dx
	mul	cx
	pop	dx
	mov	cx, ax				; cx = word count
	and	bx,bx				; if bx = 0 then dev spec form
	ret

;****************************************************************
;EX_TIMV							*	
;	ENTRY	                                        	*
;		CONTRL 7,8 = NEW VEC                            *
;	EXIT	                             			*
;		                           			*
;		CONTRL 9,10 = OLD VEC				*
;               INTOUT [0] = TIMER TICK COUNT IN MILLISECS	*
;								*
;****************************************************************
EX_TIMV:
	pushf
	cli
	push	es
	push	ds
	les	di, contrl_ptr

;;; According to the BIOS documentation, the timer interrupt should show on
;;; INT FF. I can't seem to find it there.
;;;	xor	ax, ax
;;;	mov	ds, ax
;;;	mov	si, 03FCh	;INT FF
;;;	mov	ax,[si]
;;;	mov	es:word ptr 18[di],ax	;save old timer vector
;;;	mov	ax,2[si]
;;;	mov	es:word ptr 20[di],ax
;;;	mov	ax, es:word ptr 14[di]	;Store new timer vector
;;;	mov	[si],ax
;;;	mov	ax, es:word ptr 16[di]
;;;	mov	2[si], ax

;
; We hooked the timer proper in INIT_G, so all we do here is patch our timer
; handler into the internal chain.
;
	mov	si,offset tmr_gem + 1
	mov	ax,cs:[si]
	mov	es:word ptr 18[di],ax	;save old timer vector
	mov	ax,cs:2[si]
	mov	es:word ptr 20[di],ax
	mov	ax, es:word ptr 14[di]	;Store new timer vector
	mov	cs:[si],ax
	mov	ax, es:word ptr 16[di]
	mov	cs:2[si],ax
	pop	ds
	pop	es
	popf
	mov	ax,1
	mov	CONTRL+8,ax		; flag that 1 datum is to be returned 
	mov	ax, 20			; 	
	mov	INTOUT, ax		; 20ms interrupt
	ret

	endif

EJECT
;****************************************************************
;I_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = req or actual flag			*
;								*
;	EXIT	                             			*
;		INTOUT[0] = color index				*
;		INTOUT[1] = RED					*
;		INTOUT[2] = GRN					*
;		INTOUT[3] = BLU					*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
I_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	i_colmap_chkix
	jmps	i_colmap_badix
i_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	i_colmap_ixok
	jmps	i_colmap_badix
i_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	si, offset INTOUT+2
	mov	cx, 3
	mov	INTOUT, bx		; return the color index
	mov	bx, offset req_col_tbl
	test	INTIN+2, 0ffffh		; if != 0 then return actual values
	jz	i_colmap_load
	mov	bx, offset act_col_tbl
i_colmap_load:
	mov	ax, [bx+di]
	mov	[si], ax
	add	di, 2
	add	si, 2
	loop	i_colmap_load
	ret
i_colmap_badix:
	mov	INTOUT, -1
	ret	
EJECT
;****************************************************************
;S_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = RED 0 - 1000				*
;		INTIN[1] = GRN 0 - 1000				*
;		INTIN[1] = BLU 0 - 1000				*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
S_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	s_colmap_chkix
	jmp	s_colmap_exit
s_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	s_colmap_ixok
	jmp	s_colmap_exit
s_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	dx, INTIN+2
	mov	ax, INTIN+4
	cmp	dx, ax
	jg	s_colmap_range
	mov	dx, ax
s_colmap_range:
	mov	ax, INTIN+6
	cmp	dx, ax
	jg	s_colmap_range_1
	mov	dx, ax
s_colmap_range_1:
	xor	ax, ax
	xor	bh, bh
	cmp	dx, 500
	jl	s_colmap_range_2
	mov	ax, 1000
	mov	bh, 00111111b
s_colmap_range_2:
	mov	dx, INTIN+2		; get the red value
	call	s_colmap_val
	mov	dx, INTIN+4		; get the grn value
	call	s_colmap_val
	mov	dx, INTIN+6		; get the blu values 
	call	s_colmap_val
	ret
s_colmap_exit:
	ret
;
; entry 
;	di = offset within act/real tbl of rgb values
;	ch = high order rgb lut bits
;	cl = low order rgb lut bits
;	dx = intensity value in 0 - 1000
; 
s_colmap_val:
	mov	req_col_tbl[di], dx	; save the requested value
	add	di, 2			; move to the next value 
	ret
;
EJECT
include	aximdvsp.a86
if mouse
	cseg
include ximouse.a86
endif
	cseg
include aximmre1.a86
include	aximmre2.a86
	dseg
include axidev.a86
;
esca		db	27, 'A', 0
escb		db	27, 'B', 0
escc		db	27, 'C', 0
escd		db	27, 'D', 0
esch		db	27, 'H', 0
escj		db	27, 'J', 0
esck		db	27, 'K', 0
escy		db	27, 'Y'
escyrow		db	'r'
escycol		db	'c'
		db	0
getcurpos	db	27, 'n', 0
revon		db	27, 'p', 0
revoff		db	27, 'q', 0
setgfx		db	27, '}', 0
settxt		db	27, 'z', 27, '/@', 27, 's', 0
stat_on		db	27, '/?'	;Set all LEDs on
		db	27, 'g', 27, 'W'
		db	13, 10
			;1...5...10...15...20...25...30...35...40
		db	' F2    F4     F6     F8    F10 Kbd mouse'
		db	' F1    F3     F5     F7    F9    is ON'
		db	27,'V',0
stat_off	db	27, '/?'	;Set all LEDs on
		db	27, 'g', 27, 'W'
		db	13, 10
			;1...5...10...15...20...25...30...35...40
		db	' F2    F4     F6     F8    F10 Kbd mouse'
		db	' F1    F3     F5     F7    F9    is OFF'
		db	27,'V',0
;
dispmode	dw	1		; 
MAP_COL		dw	0
		dw	1		;red
		dw	1		;green
		dw	1		;blue
		dw	1		;cyan
		dw	1		;yellow	
		dw	1		;magenta
		dw	1		;white
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
		dw	1
if not rev_vid
act_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
req_col_tbl	dw	   0,    0,    0	;black
		dw	1000, 1000, 1000	;white
else
act_col_tbl	dw	1000, 1000, 1000	;white
		dw	   0,    0,    0	;black
req_col_tbl	dw	1000, 1000, 1000	;white
		dw	   0,    0,    0
endif

msb_mask_table	db	11111111b
		db	01111111b
		db	00111111b
		db	00011111b
		db	00001111b
		db	00000111b
		db	00000011b			
		db	00000001b
		db	00000000b


CONTRL          rw      CONTRL_SIZE
INTIN           rw      INTIN_SIZE
PTSOUT          rw      PTSOUT_SIZE
		include	date.a86
		db ' Apricot PC/Xi mono driver '
		include copyrt.a86
		rs offset PTSIN + 2 * PTSIN_SIZE + 4 - offset $

INTOUT		rw INTOUT_SIZE


