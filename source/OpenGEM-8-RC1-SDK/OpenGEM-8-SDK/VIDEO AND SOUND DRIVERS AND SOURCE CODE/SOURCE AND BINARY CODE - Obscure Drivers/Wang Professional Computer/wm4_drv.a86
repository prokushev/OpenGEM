;**************************************************************************
;*			    DEVICE SPECIFIC ROUTINES			  *
;*									  *   
;*		These routines and equates are device dependant.	  *
;*									  *
;*									  *
;*									  *
;**************************************************************************
;Hist
;Name	Date	Modification
;
include externs.a86
include wm4regs.a86
cseg
;
	public	INIT_G,DINIT_G
	public	CONCAT
	if not GSX
	 public	TRAN_FM
	 public	EX_TIMV
	endif
	public	S_COLMAP
	public	I_COLMAP
	public	CONTRL, INTIN, INTOUT, PTSIN, PTSOUT
	public	MAP_COL
;
	extrn	slot:byte
	extrn	ctlbyte:byte
	extrn	entry:near		;the place to jump to if this module
;integer array indexing equates
	W_1	equ	word ptr 0
	W_2	equ	word ptr 2
	W_3	equ	word ptr 4
	W_4	equ	word ptr 6
	W_5	equ	word ptr 8
	W_6	equ	word ptr 10
	W_7	equ	word ptr 12
	W_8	equ	word ptr 14
	W_9	equ	word ptr 16
	W_10	equ	word ptr 18
;

ibmvdi	equ 0			;leave out the old code if for retail
pc1512	equ 0
;
;
;****************************************************************
;		IBM STANDARD ROM BIOS CALLS			*
;****************************************************************
direct		equ	false		; direct = true --> don't use ROS calls
					;   (for example, for two-screen stuff)
					; set to false for PCjr

SCREEN	equ	10H			;interrupts to use for rom routine I/O
KEYBD	equ	16H
rev_vid_on	equ	70h		;turn on reverse video bits
rev_vid_off	equ	07h		;turn off reverse video bits 
;
read_cur_pos	equ	3			;bios rom calls for char I/O
set_cur_pos	equ	2
read_char	equ	8
write_char	equ	9
set_palette	equ	0bh
get_character	equ	0			;keyboard read
;
EJECT
;
	jmp	entry		;if we come in from here, go to real entry
;****************************************	
;escape func 2
; Enter Graphics Mode 
;****************************************	
INIT_G:
	pushf
	mov	ax,cs
	mov	usermot+2,ax		;init the user call vectors segs
	mov	userbut+2,ax
	mov	usercur+2,ax
	mov	ax,offset umotvec
	mov	usermot,ax
	mov	ax,offset ubutvec
	mov	userbut,ax
	mov	ax,offset mov_cur
	mov	usercur,ax
	popf
escfn2: 
	cmp	dispmode,0
	jnz	escfn2_ok
	ret
escfn2_ok:
	mov	dispmode,0		; 

;	call	escfn8			; home alpha cursor.
;	call	escfn9			; clear alpha display.


;
; Locate the graphics card. We'll do this by the book, through DOS.
;
	mov	ax, 1
	int	88h	;ES:BX -> system configuration table

	add	bx, 8
	mov	cx, es:[bx] ; CX = count of screens
	and	cx, cx
	jz	noscreen
	xor	ah, ah
detect:	inc	bx
	inc	bx
	mov	si, es:[bx]  ; SI -> screen driver record
	mov	al, es:[si]  ; AL = screen type
	and	al, 70h	
	cmp	al, 11h	     ; Low-res in 40x25 or 80x25 mode?
	jnc	detnext
	mov	di, es:8[si]; DI = control word 
	mov	ah, es:[si] ; AH = ID of suitable screen
	test	ah, 80h	    ; Is it the active display?
	jnz	havescreen  ; If so, use it.
detnext:
	loop	detect 

	test	ah, ah	    ; Did we find any suitable screens?
	jnz	havescreen	
noscreen:
	mov	si, offset noscr
	call	putstr
	ret

havescreen:
	mov	si, offset initscr
	call	putstr
	and	ah, 0Fh			; Slot number
	or	ah, 10h
	mov	slot, ah
	mov	dh, ah
	mov	dl, 10h
	mov	ax, di
	and	al, 0Ch
	or	al, 5			; Page in the video RAM, set 24x80 mode
	out	dx, al
	mov	ctlbyte, al
;
; Initialise the CRTC for 24x80 mode.
;
	mov	cx, 16
	xor	dl, dl
	mov	si, offset crtc_regs
	xor	ax, ax
init_scr:
	out	dx, al
	lodsb
	xor	dl, 2
	out	dx, al
	xor	dl, 2
	loop	init_scr	
	mov	dl, 20h
	mov	ax, 0EB00h
	out	dx, ax
;
; Initialise the palette: 0=white 1=red 2=green 3=black
;
	call	initpal

;
	call	clearmem		; clear graphics display
;
; Hook the keyboard interrupt
;
	mov	ax, 3589h		; Get INT 89 handler
	int	21h
	mov	cs:old89off, bx
	mov	cs:old89seg, es
	push	ds
	mov	ax, cs			;And hook INT 89 for ourselves
	mov	ds, ax
	mov	dx, offset my_int89
	mov	ax, 2589h
	int	21h
	pop	ds

if mouse
	mov	bl,1
	call	mouse_function		;initialize the mouse
	mov	bl,2
	call	mouse_function
	mov	bl,1
	call	mouse_function
endif
	ret
;
;****************************************	
;escape func 3
; Exit Graphics Mode
;****************************************	
DINIT_G:
escfn3: 
	cmp	dispmode,0
	jz	escfn3_ok
	ret
escfn3_ok:				; 
if mouse
	mov	bl,2
	call	mouse_function
endif
;
; Unhook INT 89
;
	push	ds
	mov	ax, cs:old89seg
	mov	ds, ax
	mov	dx, cs:old89off
	mov	ax, 2589h
	int	21h
	pop	ds

	mov	dispmode,1
	mov	ax,graph_plane		; ld in graphics memory address
	mov	es,ax
	mov	cx,plane_size/2 	;number of bytes to zero
	xor	ax,ax
	mov	di,0
	rep	stosw			; store plane_size zeros in graphmem
	call	resetpal
	mov	si, offset curshow
	call	putstr
	call	escf14			; Reverse video off
	call	escfn8			;home
	call	escfn9			;clear to end of screen
	ret
;
old89seg	dw	0
old89off	dw	0

EJECT
;****************************************************************
;I_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = req or actual flag			*
;								*
;	EXIT	                             			*
;		INTOUT[0] = color index				*
;		INTOUT[1] = RED					*
;		INTOUT[2] = GRN					*
;		INTOUT[3] = BLU					*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
I_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	i_colmap_chkix
	jmps	i_colmap_badix
i_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	i_colmap_ixok
	jmps	i_colmap_badix
i_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	mov	si, offset INTOUT+2
	mov	cx, 3
	mov	INTOUT, bx		; return the color index
	mov	bx, offset req_col_tbl
	test	INTIN+2, 0ffffh		; if != 0 then return actual values
	jz	i_colmap_load
	mov	bx, offset act_col_tbl
i_colmap_load:
	mov	ax, [bx+di]
	mov	[si], ax
	add	di, 2
	add	si, 2
	loop	i_colmap_load
	ret
i_colmap_badix:
	mov	INTOUT, -1
	ret	
EJECT
;****************************************************************
;S_COLMAP							*	
;	ENTRY	                                        	*
;		INTIN[0] = color index				*
;		INTIN[1] = RED 0 - 1000				*
;		INTIN[1] = GRN 0 - 1000				*
;		INTIN[1] = BLU 0 - 1000				*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
S_COLMAP:
	mov	bx, INTIN		;check if the index is in range of dev
	cmp	bx, 0
	jge	s_colmap_chkix
	jmp	s_colmap_exit
s_colmap_chkix:
	cmp	bx, num_colors-1	;test if index is too high
	jle	s_colmap_ixok
	jmp	s_colmap_exit
s_colmap_ixok:
	shl	bx, 1
	mov	bx, MAP_COL[bx]
	push	bx
	mov	di, bx			; di = ptr to act/req col tbls
	shl	di, 1
	shl	di, 1
	add	di, bx
	add	di, bx			; mpy ix by 6 to point into table
	xor	cx, cx			; CX = palette register being generated
	xor	bx, bx			; BX = intensity value
	mov	dx, INTIN+2		; get the red value
	call	s_colmap_val
	mov	dx, INTIN+4		; get the grn value
	call	s_colmap_val
	mov	dx, INTIN+6		; get the blu values 
	call	s_colmap_val
	or	cx, bx			; CX = palette register value
	pop	bx			; BX = ink number

	add	bx, bx
	mov	ah, slot
	mov	dh, ah
	mov	dl, 40h	
	add	dx, bx			; DX -> palette register
	mov	ax, cx			; AX  = value
	out	dx, ax

s_colmap_exit:
	ret
; 
s_colmap_val:
	shl	cx, 1
	shl	cx, 1
	shl	cx, 1
	shl	cx, 1
	mov	req_col_tbl[di], dx	; save the requested value
;
; Change the 0-1000 scale to 0-15
;
	xor	bl, bl
	mov	ax, 70
s_c_val:
	cmp	dx, ax
	jle	s_c_val1
	add	ax, 62
	inc	bl
	jmps	s_c_val
;
s_c_val1:	
	or	cl, bl
	cmp	bl, 0Ch
	jc	s_c_val2
	or	bh, 0F0h		; High intensity
s_c_val2:
	mov	act_col_tbl[di], ax
	add	di, 2			; move to the next value 
	ret

	if not GSX

;****************************************************************
;TRAN_FM							*	
;	ENTRY	                                        	*
;		                                     		*
;								*
;	EXIT	                             			*
;		                           			*
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
TRAN_FM:
	push	bp	
	push	es
	push	ds
	les	di,contrl_ptr
	mov	ax, es: word ptr 14[di]
	mov	bx, es: word ptr 16[di]		; get smfdb pointer
	mov	dx, es: word ptr 18[di]
	mov	bp, es: word ptr 20[di]		; get dmfdb pointer
	mov	es, bx
	mov	di, ax				; set es:di to it
	mov	ax, es: word ptr 12[di]		; get num of planes in source
; xform n to n planes
	push	ax				; save the plane count
	call	calc_src_form
	call	calc_des_form
	call	calc_seg_off
	pop	bx				; get the plane count back
col_to_col_lp:
	push	si
	push	di
	push	bx
	push	cx
col_to_col_loop:
	lodsw
if not byte_swap
	xchg	ah,al
endif
if rev_vid
	not	ax
endif
	stosw
	loop	col_to_col_loop
	pop	cx
	pop	bx
	pop	di
	pop	si
	call	tran_next_seg
	dec	bx
	jnz	col_to_col_lp
	pop	ds
	pop	es
	pop	bp
	ret
tran_next_seg:
	push	cx
	mov	ax, cx
	mov	cl, 3
	shr	ax, cl			;get the segment increment
	mov	bp, es
	add	bp, ax
	mov	es, bp
	mov	bp, ds
	add	bp, ax
	mov	ds, bp
	pop	cx
	mov	ax, cx			;get the byte increment
	and	ax, 0007h
	shl	ax, 1
	add	si, ax
	add	di, ax
	ret
;
calc_seg_off:
	mov	bp, cx				; find the next seg
	shr	bp,1
	shr	bp,1
	shr	bp,1
	mov	dx, cx
	shl	dx, 1
	and	dx, 000fh			; find the incremental offset
;	mov	bx,num_planes
	ret
;
calc_des_form:
	mov	ds, bp
	mov	si, dx				; load dmfdb pointer
	not	bx
	and	bx,1				; invert format
	mov	10[si],bx			; toggle dest form
	mov	ax, es: word ptr 2[di]		; get source ptr seg
	mov	di, es: word ptr [di]		; offset
	mov	es, ax
	mov	ax, 2[si]
	mov	si, [si]			; get dest ptr seg,offset
	mov	ds, ax
	xchg	si,di				; swap pointers
	mov	ax, es
	mov	dx, ds
	mov	es, dx
	mov	ds, ax
	ret
;
calc_src_form:
	mov	bx, es: word ptr 10[di]		; get the format flag
	mov	ax, es: word ptr 8[di]		; get the width in words
	mov	cx, es: word ptr 6[di]		; get the height in pixels
	push	dx
	mul	cx
	pop	dx
	mov	cx, ax				; cx = word count
	and	bx,bx				; if bx = 0 then dev spec form
	ret

EJECT
;****************************************************************
;EX_TIMV							*	
;	ENTRY	                                        	*
;		CONTRL 7,8 = NEW VEC                            *
;	EXIT	                             			*
;		                           			*
;		CONTRL 9,10 = OLD VEC				*
;               INTOUT [0] = TIMER TICK COUNT IN MILLISECS	*
;								*
;****************************************************************
EX_TIMV:
	pushf
	cli
	push	es
	push	ds
	les	di,contrl_ptr
	xor	ax,ax
	mov	ds,ax
	mov	si,4 * 93h		;setup the offset to timer int vector
	mov	ax,[si]
	mov	es:word ptr 18[di],ax	;save old timer vector
	mov	ax,2[si]
	mov	es:word ptr 20[di],ax
	mov	ax, es:word ptr 14[di]
	mov	[si],ax
	mov	ax, es:word ptr 16[di]
	mov	2[si],ax
	pop	ds
	pop	es
	popf
	mov	ax,1
	mov	CONTRL+8,ax		; flag that data is to be returned 
	mov	ax, 50			; Timer frequency: 50ms / tick
	mov	INTOUT, ax		; return the millisec/tick count 
	ret

	endif

if direct
;
;*****************************************************************
;crt_init
;	initializes the display controller with data from table
;*****************************************************************
crt_init:
	mov	dx,03d4h		;select port
	mov	bl,0			;select register
	mov	cl,length crt_init_table_a
crt_init_loop:
	mov	al,bl
	out	dx,al
	inc	bx
	inc	dx
	lodsb
	out	dx,al
	dec	dx
	loop	crt_init_loop
	inc	dx
	inc	dx
	inc	dx
	inc	dx
	lodsb
	out	dx,al
	inc	dx
	lodsb
	out	dx,al
	ret
endif
EJECT
;****************************************************************
;CONCAT 							*	
;	ENTRY	Reg. BX - X-coordinate (dev. coord.)		*
;		Reg. AX - Y-coordinate (dev. coord.)		*
;								*
;	EXIT	Reg. DI - Physical address			*
;		Reg. BL - Byte index				*	
;								*
;	Reg. Used. AX, BX, CX, DX, DI				*
;								*
;****************************************************************
concat:
	and	bx, 03ffh		;mask off 10 lsb for x-coord.
	mov	dl, bl			;save low order byte of x-coord
	and	dl, 07h 		;mask off data bit index.
	mov	cl, 3			;set count to 3
	shr	bx, cl			;shift out 3 lsb of x-coord.
	add	bx, bx			;*2; we have odd/even dichotomy
;
; Multiply AX by 256
;
	mov	ah, al			;y * 256 
	xor	al, al
	add	ax, bx			;+ (x >> 3)
	mov	di, ax			;di = memory address
	xor	dh, dh
	mov	bx, dx			;bx = bit index into data byte
	ret
;

putstr:	lodsb
	or	al, al
	jnz	putstr1
	ret
putstr1:
	int	29h
	jmps	putstr
;
initpal:
	mov	dl, 40h
	mov	cx, 4
ipal_lp:
	xor	ax, ax		;Ink 0 is white
	dec	ax
	out	dx, ax	
	inc	dl
	inc	dl
	mov	ax, 0FF00h	;Ink 1 is red
	out	dx, ax
	inc	dl
	inc	dl
	mov	ax, 0F0F0h	;Ink 2 is green
	out	dx, ax
	inc	dl
	inc	dl
	xor	ax, ax		;Ink 3 is black
	out	dx, ax
	inc	dl
	inc	dl
	loop	ipal_lp
	ret
;
resetpal:
	mov	ah, slot
	mov	dh, ah
	mov	dl, 40h
	mov	cx, 16
	mov	si, offset defpal
rpal_lp:
	lodsw
	out	dx, ax
	inc	dl
	inc	dl
	loop	rpal_lp
	ret

;
EJECT
include	wm4mdvsp.a86
if mouse
cseg
include imouse.a86
endif
cseg
include wm4mmre1.a86
include wm4mmre2.a86
dseg
include wm4dev.a86
dispmode	dw	1
mode_save	db	0

noscr		db	'No suitable video card found.',13,10,0
esca            db      27, '[1A', 0
escb            db      27, '[1B', 0
escc            db      27, '[1C', 0
escd            db      27, '[1D', 0
esch            db      27, '[H', 0
escj            db      27, '[J', 0
esck            db      27, '[K', 0
escy            db      27, '['
escyrow         db      '00;'
escycol         db      '000'
                db      'H',0
getcurpos       db      27, 'n', 0
revon           db      27, '[7m', 0
revoff          db      27, '[0m', 0
curshow         db      27, '[5l', 0
initscr		db	27, '[7h'		;No terminating zero; this
curhide         db      27, '[5h', 0		;continues through curhide
stat_on		db	27, '[12h', 0
stat_off	db	27, '[12l', 0
crtc_regs	db	71h		;Horizontal total
		db	50h		;Horizontal displayed
		db	5Bh		;Horizontal sync
		db	78h		;Horizontal sync width
		db	1Ch		;Vertical total
		db	19h		;Vertical displayed
		db	1Ah		;Vertical sync
		db	0		;Interlace
		db	8		;Max raster address
		db	67h		;Cursor start
		db	8		;Cursor end
		db	0		;Start address
		db	0
		db	0		;Cursor address
		db	0
;
defpal		dw	00000h, 0F000h, 00FFFh, 0FFFFh
		dw	0000Fh, 0F00Fh, 00FF0h, 0FFF0h
		dw	000F0h, 0F0F0h, 00F0Fh, 0FF0Fh
		dw	000FFh, 0F0FFh, 00F00h, 0FF00h	
		
act_col_tbl	dw	1000, 1000, 1000	;white
		dw	1000,    0,    0	;red
		dw	   0, 1000,    0	;green
		dw	   0,    0,    0	;black

req_col_tbl	dw	1000, 1000, 1000	;white
		dw	1000,    0,    0	;red
		dw	   0, 1000,    0	;green
		dw	   0,    0,    0	;black


MAP_COL		dw	0		;white
		dw	3		;black
		dw	1		;red
		dw	2		;green
		dw	3		;cyan
		dw	3		;yellow	
		dw	3		;magenta
		dw	3		;white
		dw	3
		dw	3
		dw	3
		dw	3
		dw	3
		dw	3
		dw	3
		dw	3

CONTRL          rw      CONTRL_SIZE
INTIN           rw      INTIN_SIZE
PTSOUT          rw      PTSOUT_SIZE
		include	date.a86
		db ' Wang Professional Computer mono driver '
		include copyrt.a86
		rs offset PTSIN + 2 * PTSIN_SIZE + 4 - offset $

INTOUT		rw INTOUT_SIZE



